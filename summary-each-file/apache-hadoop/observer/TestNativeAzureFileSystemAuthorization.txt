TestNativeAzureFileSystemAuthorization acts as a publisher for observer AzureBlobStorageTestAccount, which creates Configuration, which creates Test Account, which sets Up, which allows NativeAzureFileSystem parameter of fs, String parameter of path Recursive Delete, which sets String parameter of operation, Path parameter of path Expected Failure Message, which gets Current User Short Name, which tests Create Access Without Create Intermediate Folders Check Positive, which tests Create Access With Create Intermediate Folders Check Positive, which tests Create Access With Overwrite Check Negative, which tests Create Access With Overwrite Check Positive, which tests Create Access Check Negative, which tests List Access Check Positive, which tests List Access Check Negative, which tests Rename Access Check Positive, which tests Rename Access Check Negative, which tests Rename Access Check Negative On Dst Folder, which tests Rename Access Check Positive On Dst Folder, which recursives Path parameter of path Delete, which tests Rename Positive When Destination Folder Exists, which tests Rename Positive When Destination Folder Does Not Exist, which tests Rename On Non Existent Source, which tests Rename With Sticky Bit Positive, which tests Rename With Sticky Bit Negative, which tests Rename On Non Existent Source With Sticky Bit, which tests Read Access Check Positive, which tests Read Access Check Negative, which tests File Delete Access Check Positive, which tests File Delete Access Check Negative, which tests File Delete Access With Intermediate Folders Check Positive, which tests Delete Auth Check Failure Leaves Files Undeleted, which tests Single File Delete With Sticky Bit Positive, which tests Single File Delete With Sticky Bit Negative, which tests Recursive Delete Succeeds With Stickybit, which tests Recursive Delete Fails With Stickybit, which tests Delete Succeeds For Only Files Owned By User With Stickybit Set, which tests Delete Succeeds For Parent Directory Owner User With Stickybit, which tests Delete Scenario For Root, which tests Get File Status Positive, which tests Mkdirs Check Positive, which tests Mkdirs With Existing Hierarchy Check Positive1, which tests Mkdirs With Existing Hierarchy Check Positive2, which tests Mkdirs Check Negative, which tests List Status With Triple Slash Check Positive, which tests Owner Permission Positive, which tests Owner Permission Negative, which tests Retrieving Owner Does Not Fail When File Does Not Exist, which tests Set Owner Throws For Unauthorised Users, which tests Set Owner Succeeds For Authorised Users, which tests Set Owner Succeeds For Any User When Wild Card Is Specified, which tests Set Owner Fails For Illegal Setup, which tests Rename Pending Authorization Calls, which tests Set Permission Throws For Unauthorised Users, which tests Set Permission For Authorised Users, which tests Set Permission For Owner, which tests Set Permission When Wild Card In Allowed User List, which tests Set Permission For Invalid Allowed User List, which tests Set Permission For Daemon User, which tests Set Permission For Invalid Daemon User List, which tests Access When Permissions Match For All And Read Write, which tests Access When Permissions Match For Write And Write Execute, which tests Access When Permissions Match For Read And Read Execute, which tests Access When Permissions Match For Execute And None, which tests Access When Permissions Do Not Match, which tests Access File Does Not Exist, which tests Access File Does Not Exist When No Access Permission, which tests Access For File And Intermediate Directory Created, which tests String parameter of path, List<String> parameter of chmodAllowedUsers, List<String> parameter of daemonUsers, String parameter of user, boolean parameter of isSetPermissionFailureCase, boolean parameter of isInvalidSetup Set Permission, which executes UserGroupInformation parameter of testUser, Path parameter of testPath, FsPermission parameter of oldPermission, FsPermission parameter of newPermission, boolean parameter of isInvalidSetup Set Permission Failure, which executes UserGroupInformation parameter of testUser, Path parameter of testPath, FsPermission parameter of oldPermission, FsPermission parameter of newPermission Set Permission Success, which asserts Path parameter of path, FsPermission parameter of newPermission Permission Equals, which asserts Path parameter of path, String parameter of owner Owner Equals, which asserts final parameter of Path, final parameter of FsAction No Access.
