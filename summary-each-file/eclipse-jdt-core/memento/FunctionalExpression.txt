FunctionalExpression acts as a caretaker for memento Binding, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
FunctionalExpression acts as a caretaker for memento S, which is inherited by, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
FunctionalExpression acts as a caretaker for memento IErrorHandlingPolicy, which is inherited by, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
FunctionalExpression acts as a caretaker for memento Binding, which is inherited by, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
FunctionalExpression acts as a caretaker for memento E, which is inherited by, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
FunctionalExpression acts as a caretaker for memento C, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
FunctionalExpression acts as a caretaker for memento C, which is inherited by, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
FunctionalExpression acts as a caretaker for memento R, which is inherited by, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
FunctionalExpression acts as a caretaker for memento ExpressionContext, which is inherited by, which is TypeBinding parameter of targetType, Scope parameter of scope Boxing Compatible With, which sets CompilationResult parameter of compilationResult Compilation Result, which gets Method Binding, which sets TypeBinding parameter of expectedType Expected Type, which sets ExpressionContext parameter of context Expression Context, which gets Expression Context, which is MethodBinding parameter of candidate Poly Expression, which is Poly Expression, which is Functional Type, which is TypeBinding parameter of targetType, MethodBinding parameter of method Pertinent To Applicability, which invocations Target Type, which expects Type, which argumentses Type Elided, which records Scope parameter of scope Functional Type, which resolves BlockScope parameter of blockScope Type, which resolves BlockScope parameter of blockScope, boolean parameter of skipKosherCheck Type, which reports BlockScope parameter of blockScope, MethodBinding parameter of sam Sam Problem, which checks ReferenceBinding parameter of referenceBinding Visibility, which visits ReferenceBinding parameter of referenceBinding, which visits ParameterizedTypeBinding parameter of parameterizedTypeBinding, which visits RawTypeBinding parameter of rawTypeBinding, which visibles TypeBinding parameter of type, which visibles TypeBinding[] parameter of types, which koshers Scope parameter of scope, MethodBinding parameter of sam, boolean parameter of shouldChatter Descriptor, which nulls FlowInfo parameter of flowInfo Status, which diagnosticses Source End, which gets Required Bridges, which requires Bridges, which cleans Up.
