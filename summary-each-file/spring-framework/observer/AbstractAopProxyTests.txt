AbstractAopProxyTests acts as a publisher for observer Advised, which is inherited by CglibProxyTests, JdkDynamicProxyTests, which sets Up, which tears Down, which creates ProxyCreatorSupport parameter of as Proxy, which creates AdvisedSupport parameter of as Aop Proxy, which requires Target, which tests No Interceptors And No Target, which tests Values Stick, which tests Serialization Advice And Target Not Serializable, which tests Serialization Advice Not Serializable, which tests Serializable Target And Advice, which tests One Advised Object Calls Another, which tests Reentrance, which tests Target Can Get Proxy, which tests Target Cant Get Proxy By Default, which tests Context, which tests No Context, which tests final parameter of boolean Context, which tests Target Returns This, which tests Declared Exception, which tests Undeclared Checked Exception, which tests Undeclared Unchecked Exception, which tests Target Can Get Invocation Even If No Advice Chain, which tests Target Can Get Invocation, which asserts No Invocation Context, which tests Mixin With Introduction Advisor, which tests Mixin With Introduction Info, which tests ProxyFactory parameter of pc Test Bean Introduction, which tests Replace Argument, which tests Can Cast Proxy To Proxy Config, which tests Advice Implements Introduction Info, which tests Cannot Add Dynamic Introduction Advice Except In Introduction Advice, which tests Rejects Bogus Dynamic Introduction Advice With No Adapter, which tests Cannot Add Introduction Advice With Unimplemented Interface, which tests Introduction Throws Unchecked Exception, which tests Cannot Add Introduction Advice To Introduce Class, which tests Cannot Add Interceptor When Frozen, which tests Cannot Add Advisor When Frozen Using Cast, which tests Cannot Remove Advisor When Frozen, which tests Use As Hash Key, which tests Proxy Config String, which tests Can Prevent Cast To Advised Using Opaque, which tests Advice Support Listeners, which tests Existing Proxy Changes Target, which tests Dynamic Method Pointcut That Always Applies Statically, which tests Dynamic Method Pointcut That Applies Statically Only To Setters, which tests Static Method Pointcut, which tests Clone Invocation To Proceed Three Times, which tests Can Change Arguments Independently On Cloned Invocation, which tests Overloaded Methods With Different Advice, which tests Proxy Is Bound Before Target Source Invoked, which tests Equals, which tests Before Advisor Is Invoked, which tests User Attributes, which tests Multi Advice, which tests Before Advice Throws Exception, which tests After Returning Advisor Is Invoked, which tests After Returning Advisor Is Not Invoked On Exception, which tests Throws Advisor Is Invoked, which tests Add Throws Advice Without Advisor, which invokes MethodInvocation parameter of mi, which invokes MethodInvocation parameter of mi, which invokes MethodInvocation parameter of mi, which invokes MethodInvocation parameter of mi, which matches Method parameter of m, @Nullable parameter of Class<?>, Object... parameter of args, which matches Method parameter of m, @Nullable parameter of Class<?>, which matches Method parameter of m, @Nullable parameter of Class<?>, Object... parameter of args, which matches Method parameter of m, @Nullable parameter of Class<?>, Object... parameter of args, which matches Method parameter of m, @Nullable parameter of Class<?>, which matches Method parameter of m, @Nullable parameter of Class<?>, which invokes MethodInvocation parameter of invocation, which implements Class<?> parameter of intf Interface, which gets Spouse, which equals Object parameter of other, which hashes Code, which absquatulates, which gets Count, which increments Via This, which increments Via Proxy, which increments, which gets Count, which increments Via This, which increments Via Proxy, which checks Advised parameter of advised Advised, which increments, which checks Advised parameter of advised Advised, which activates AdvisedSupport parameter of advised, which advices AdvisedSupport parameter of advised Changed, which activates AdvisedSupport parameter of advised, which advices AdvisedSupport parameter of advised Changed, which overloads, which overloads int parameter of i, which overloads String parameter of foo, which nos Advice, which overloads, which overloads int parameter of i, which overloads String parameter of s, which nos Advice, which befores Method parameter of m, Object[] parameter of args, @Nullable parameter of Object, which afters @Nullable parameter of Object, Method parameter of m, Object[] parameter of args, @Nullable parameter of Object Returning, which afters IOException parameter of ex Throwing, which afters UncheckedException parameter of ex Throwing, which afters IOException parameter of ex Throwing, which afters UncheckedException parameter of ex Throwing, which resets, which sets Object parameter of target Target, which gets Target Class, which gets Target, which releases Object parameter of pTarget Target, which verifies, which is Static, which gets Name, which absquatulates, which assertionses MethodInvocation parameter of invocation, which assertionses MethodInvocation parameter of invocation.
AbstractAopProxyTests acts as a publisher for observer AdvisedSupport, which is inherited by CglibProxyTests, JdkDynamicProxyTests, which sets Up, which tears Down, which creates ProxyCreatorSupport parameter of as Proxy, which creates AdvisedSupport parameter of as Aop Proxy, which requires Target, which tests No Interceptors And No Target, which tests Values Stick, which tests Serialization Advice And Target Not Serializable, which tests Serialization Advice Not Serializable, which tests Serializable Target And Advice, which tests One Advised Object Calls Another, which tests Reentrance, which tests Target Can Get Proxy, which tests Target Cant Get Proxy By Default, which tests Context, which tests No Context, which tests final parameter of boolean Context, which tests Target Returns This, which tests Declared Exception, which tests Undeclared Checked Exception, which tests Undeclared Unchecked Exception, which tests Target Can Get Invocation Even If No Advice Chain, which tests Target Can Get Invocation, which asserts No Invocation Context, which tests Mixin With Introduction Advisor, which tests Mixin With Introduction Info, which tests ProxyFactory parameter of pc Test Bean Introduction, which tests Replace Argument, which tests Can Cast Proxy To Proxy Config, which tests Advice Implements Introduction Info, which tests Cannot Add Dynamic Introduction Advice Except In Introduction Advice, which tests Rejects Bogus Dynamic Introduction Advice With No Adapter, which tests Cannot Add Introduction Advice With Unimplemented Interface, which tests Introduction Throws Unchecked Exception, which tests Cannot Add Introduction Advice To Introduce Class, which tests Cannot Add Interceptor When Frozen, which tests Cannot Add Advisor When Frozen Using Cast, which tests Cannot Remove Advisor When Frozen, which tests Use As Hash Key, which tests Proxy Config String, which tests Can Prevent Cast To Advised Using Opaque, which tests Advice Support Listeners, which tests Existing Proxy Changes Target, which tests Dynamic Method Pointcut That Always Applies Statically, which tests Dynamic Method Pointcut That Applies Statically Only To Setters, which tests Static Method Pointcut, which tests Clone Invocation To Proceed Three Times, which tests Can Change Arguments Independently On Cloned Invocation, which tests Overloaded Methods With Different Advice, which tests Proxy Is Bound Before Target Source Invoked, which tests Equals, which tests Before Advisor Is Invoked, which tests User Attributes, which tests Multi Advice, which tests Before Advice Throws Exception, which tests After Returning Advisor Is Invoked, which tests After Returning Advisor Is Not Invoked On Exception, which tests Throws Advisor Is Invoked, which tests Add Throws Advice Without Advisor, which invokes MethodInvocation parameter of mi, which invokes MethodInvocation parameter of mi, which invokes MethodInvocation parameter of mi, which invokes MethodInvocation parameter of mi, which matches Method parameter of m, @Nullable parameter of Class<?>, Object... parameter of args, which matches Method parameter of m, @Nullable parameter of Class<?>, which matches Method parameter of m, @Nullable parameter of Class<?>, Object... parameter of args, which matches Method parameter of m, @Nullable parameter of Class<?>, Object... parameter of args, which matches Method parameter of m, @Nullable parameter of Class<?>, which matches Method parameter of m, @Nullable parameter of Class<?>, which invokes MethodInvocation parameter of invocation, which implements Class<?> parameter of intf Interface, which gets Spouse, which equals Object parameter of other, which hashes Code, which absquatulates, which gets Count, which increments Via This, which increments Via Proxy, which increments, which gets Count, which increments Via This, which increments Via Proxy, which checks Advised parameter of advised Advised, which increments, which checks Advised parameter of advised Advised, which activates AdvisedSupport parameter of advised, which advices AdvisedSupport parameter of advised Changed, which activates AdvisedSupport parameter of advised, which advices AdvisedSupport parameter of advised Changed, which overloads, which overloads int parameter of i, which overloads String parameter of foo, which nos Advice, which overloads, which overloads int parameter of i, which overloads String parameter of s, which nos Advice, which befores Method parameter of m, Object[] parameter of args, @Nullable parameter of Object, which afters @Nullable parameter of Object, Method parameter of m, Object[] parameter of args, @Nullable parameter of Object Returning, which afters IOException parameter of ex Throwing, which afters UncheckedException parameter of ex Throwing, which afters IOException parameter of ex Throwing, which afters UncheckedException parameter of ex Throwing, which resets, which sets Object parameter of target Target, which gets Target Class, which gets Target, which releases Object parameter of pTarget Target, which verifies, which is Static, which gets Name, which absquatulates, which assertionses MethodInvocation parameter of invocation, which assertionses MethodInvocation parameter of invocation.
